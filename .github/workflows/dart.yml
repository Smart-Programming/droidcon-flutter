name: Flutter CI

# This workflow is triggered on pushes to the repository.

on:
  push:
    branches: ["**"]
  pull_request:
    branches:
      ["**"]
      # - develop

# on: push    # Default will running for every branch.

jobs:
  # Check for tests coverage
  tests:
    name: Automated tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-java@v2
        with:
          distribution: "zulu"
          java-version: "12.x"
          cache: "gradle"

      - uses: subosito/flutter-action@v2
        with:
          flutter-version: "3.10.0"
          cache: true

      # Get flutter dependencies.
      - run: flutter pub get
      - run: flutter analyze .
      - name: Run unit tests
        run: flutter test --coverage

      - name: check coverage
        shell: bash
        run: |
          sudo apt-get install lcov

  version:
    name: Create version number
    needs: tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      # - name: Fetch all history for all tags and branches
      #   run: |
      #     git fetch --prune --depth=10000
      - name: Install GitVersion
        uses: gittools/actions/gitversion/setup@v0.9.7
        with:
          versionSpec: "5.x"
      - name: Use GitVersion
        id: gitversion
        uses: gittools/actions/gitversion/execute@v0.9.7
      - name: Create version.txt with nuGetVersion
        run: echo ${{ steps.gitversion.outputs.nuGetVersion  }} > version.txt
      - name: Upload version.txt
        uses: actions/upload-artifact@v2
        with:
          name: gitversion
          path: version.txt

  build:
    # This job will run on ubuntu virtual machine
    name: Create Android Build
    needs: version
    runs-on: ubuntu-latest
    steps:
      # Setup Java environment in order to build the Android app.
      - uses: actions/checkout@v3
      - uses: actions/setup-java@v2
        with:
          distribution: "zulu"
          java-version: "12.x"
          cache: "gradle"

      - uses: subosito/flutter-action@v2
        with:
          flutter-version: "3.10.0"
          cache: true

      # Update version
      - name: Get version.txt
        uses: actions/download-artifact@v2
        with:
          name: gitversion
      - name: Create new file without newline char from version.txt
        run: tr -d '\n' < version.txt > version1.txt
      - name: Read version
        id: version
        uses: juliangruber/read-file-action@v1
        with:
          path: version1.txt
      - name: Update version in YAML
        run: sed -i 's/99.99.99+99/${{ steps.version.outputs.content }}+${{ github.run_number }}/g' pubspec.yaml

      # Get flutter dependencies.
      - run: flutter pub get

      # RESTORE
      - name: Download Android keystore
        id: android_keystore
        uses: timheuer/base64-to-file@v1.0.3
        with:
          fileName: upload-keystore.jks
          encodedString: ${{ secrets.KEYSTORE_BASE64 }}
      - name: Create key.properties
        run: |
          echo "storeFile=${{ steps.android_keystore.outputs.filePath }}" > android/key.properties
          echo "storePassword=${{ secrets.STORE_PASSWORD }}" >> android/key.properties
          echo "keyPassword=${{ secrets.KEY_PASSWORD }}" >> android/key.properties
          echo "keyAlias=${{ secrets.KEY_ALIAS }}" >> android/key.properties

        # RESTORE
      # - name: Decode google-services.json
      #   env:
      #     GOOGLE_SERVICES_JSON: ${{ secrets.GOOGLE_SERVICES_JSON }}
      #   run: echo "$GOOGLE_SERVICES_JSON" > android/app/google-services.json

      # Build apk.
      - run: flutter build apk
      - uses: actions/upload-artifact@v1
        with:
          name: release-apk
          path: build/app/outputs/apk/release/app-release.apk
      - name: Upload artifact to Firebase App Distribution
        uses: wzieba/Firebase-Distribution-Github-Action@v1
        with:
          appId: ${{secrets.APP_ID}}
          token: ${{secrets.FIREBASE_TOKEN}}
          groups: sicarions
          file: build/app/outputs/apk/release/app-release.apk
